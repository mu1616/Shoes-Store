<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 상품테이블, display(진열) 테이블  -->
<mapper
	namespace="com.example.store.model.product.dao.ProductDAO">
	<!-- 상품 등록  -->
	<insert id="productRegister"
		parameterType="com.example.store.model.product.dto.ProductEntity"
		useGeneratedKeys="true" keyProperty="product_idx">
		insert into product
		(product_name,product_price,product_brand,product_category,
			product_contents,product_image,product_isdisplay) 
		values (#{product_name},#{product_price},#{product_brand},
			#{product_category},#{product_contents},#{product_image},
			#{product_isdisplay})
	</insert>
	
	<!-- 조건에 맞는 상품 개수 가져오기 -->
	<select id="countProduct"  parameterType="com.example.store.model.search.dto.SearchDTO" 
		resultType="int">
		SELECT count(*)        
		FROM product
		<if test="option == 0">
		where product_name like '${product_name}' and
			product_idx like '${product_idx}' and
			product_category like '${product_category}' and
			product_brand like '${product_brand}' 
		</if>
		<if test="option == 1">
		where (product_name like '${product_name}' or
			product_category like '${product_category}' or
			product_brand like '${product_brand}' )
		</if>
			and product_isDisplay like '${product_isDisplay}'
	</select>

	<!-- 조건에 맞는 상품 가져오기 -->
	<select id="selectProduct"  parameterType="com.example.store.model.search.dto.SearchDTO"
		resultType="com.example.store.model.product.dto.ProductDTO">
		SELECT *
		FROM product
		<if test="searchDto.option == 0">
		where product_name like '${searchDto.product_name}' and
			product_idx like '${searchDto.product_idx}' and
			product_category like '${searchDto.product_category}' and
			product_brand like '${searchDto.product_brand}' 
		</if>
		<if test="searchDto.option == 1">
		where (product_name like '${searchDto.product_name}' or
			product_category like '${searchDto.product_category}' or
			product_brand like '${searchDto.product_brand}' )
		</if>
			and product_isDisplay like '${searchDto.product_isDisplay}'
		<if test="searchDto.sort == 1">
		ORDER BY product_idx desc
		</if>
		<if test="searchDto.sort == 2">
		ORDER BY product_price desc
		</if>
		<if test="searchDto.sort == 3">
		ORDER BY product_price asc
		</if>
		<if test="searchDto.sort == 4">
		ORDER BY product_salecount desc
		</if>
		LIMIT #{start},#{length}
	</select>
	
	<!-- 상품 삭제 -->
	<delete id="deleteProduct" parameterType="map">
		delete from product
		<where>
		<foreach collection="array" item="idx" open="" close="" separator="OR">
			(product_idx = #{idx})
		</foreach>
		</where>
	</delete>
	
	<!-- prdocut_idx로 상품검색, ProductEntity 반환 -->
	<select id="selectOne" resultType="com.example.store.model.product.dto.ProductEntity">
		select * from product
		where product_idx=#{product_idx}
	</select>
	
	<!-- 상품정보 수정 -->
	<update id="updateProduct" parameterType="com.example.store.model.product.dto.ProductEntity">
		update product
		set product_name = #{productEntity.product_name}, product_price = #{productEntity.product_price},
			product_brand = #{productEntity.product_brand}, product_category = #{productEntity.product_category},
			product_contents = #{productEntity.product_contents}, product_isDisplay = #{productEntity.product_isDisplay}
			<if test="productEntity.product_image != null">
				,product_image = #{productEntity.product_image}
    		</if>
			where product_idx = #{product_idx}
	</update>
	
	<!-- prdocut_idx로 상품검색, ProductDTO 반환 -->
	<select id="selectProductDTO" resultType="com.example.store.model.product.dto.ProductDTO">
		SELECT *
		FROM product
		where product_idx = #{product_idx}
	</select>
	
	<!-- 메인진열 상품 가져오기 -->
	<select id="selectProductByDisplay" resultType="com.example.store.model.product.dto.ProductDTO">
		SELECT p.*, d.*
		from display as d, product as p
		where display_md = #{display_md} and p.product_idx = d.display_product
		order by display_order asc
	</select>
	
	<!-- 메인진열 상품추가 -->
	<insert id="addProductMainDisplay">
		INSERT INTO display (display_product,display_md,display_order) VALUES (#{product_idx},#{display_md},
			(SELECT ifnull(MAX(display_order),"0") FROM display AS d WHERE display_md = #{display_md})+1)
	</insert>
	
	<!-- 메인진열 상품삭제(모든상품) -->
	<delete id="delProductMainDisplay">
		DELETE FROM display 
		WHERE display_md = #{display_md}
	</delete>
	
	<!-- 특정 상품을 메인진열에서 제거 -->
	<delete id="delProductMainDisplayByProduct">
		delete from display
		where display_product = #{product_idx}
	</delete>
	
	<!-- 총판매횟수 업데이트 -->
	<update id="updateSaleCount">
		update product 
		set product_salecount = product_salecount + #{count}
		where product_idx = #{product_idx}
	</update>
	
	<!-- 별점 업데이트 -->
	<update id="updateRating">
		update product 
		set product_rating = 
			(select sum(review_rating) from review 
			where review_product = #{product_idx}) / 
			product_reviewcount
		where product_idx = #{product_idx}
	</update>
	
	<!-- 리뷰횟수 업데이트 -->
	<update id="updateReviewCount">
		update product
		set product_reviewcount = product_reviewcount + #{count}
		where product_idx = #{product_idx}
	</update>
	
	<!-- 별점 0점으로 초기화 -->
	<update id="initRating">
		update product
		set product_rating = 0
		where product_idx = #{product_idx}
	</update>
</mapper>